#include "jt_funcs.h"

shader jt_gridless(
	int steps = 1,
	int frame = 0,
	int fps = 25,
	string density_pattern = "density_%d",
	string volume_pattern = "vel_%d",

	output point out = vector(0,0,0)
)
{
	float time_d = 1.0/fps;
	point P_obj = transform("object", P);
	
	vector vol_sample;
	point P_disp = P_obj;
	vector vol_sample_offset = vector(0,0,0);

	/*for (int i = frame; i > frame - steps; i--)
	{
		vector vol_sample = texture3d(format(volume_pattern, i), P_disp, "interp", "linear");
		P_disp = P_disp - vol_sample * time_d;
	}*/
	vol_sample = -1 * texture3d("vel_39", P_disp, "interp", "linear") * time_d;
	P_disp += vol_sample;
	vol_sample_offset += vol_sample;

	vol_sample = -1 * texture3d("vel_38", P_disp, "interp", "linear") * time_d;
	//P_disp += vol_sample;
	vol_sample_offset += vol_sample;

	out = vol_sample_offset;
}